"use strict";var express=require("express"),mongoose=require("mongoose"),bodyParser=require("body-parser"),cors=require("cors"),app=express();app.use(express.json()),app.use(bodyParser.json()),app.use(cors()),mongoose.connect("mongodb://localhost:27017/fitnessDB",{}).then(function(){return console.log("MongoDB-Verbindung erfolgreich")}).catch(function(e){return console.error("MongoDB-Verbindungsfehler:",e)});var benutzerSchema=new mongoose.Schema({Vorname:{type:String,required:!0},Nachname:{type:String,required:!0},email:{type:String,required:!0,unique:!0},tel:{type:String},Geschlecht:{type:String},adresse:{type:String},passwort:{type:String,required:!0}}),Benutzer=mongoose.model("Benutzer",benutzerSchema),terminSchema=new mongoose.Schema({email:{type:String,ref:"Benutzer",required:!0},datum:{type:Date,required:!0},zeit:{type:String,required:!0}}),Termin=mongoose.model("Termin",terminSchema);app.post("/api/auth/register",function(r,n){var t,s,a,o,i,u,c,l,m;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return t=r.body,s=t.Vorname,a=t.Nachname,o=t.email,i=t.tel,u=t.Geschlecht,c=t.adresse,l=t.passwort,e.prev=1,m=new Benutzer({Vorname:s,Nachname:a,email:o,tel:i,Geschlecht:u,adresse:c,passwort:l}),e.next=5,regeneratorRuntime.awrap(m.save());case 5:n.status(201).json({message:"Benutzer erfolgreich gespeichert"}),e.next=12;break;case 8:e.prev=8,e.t0=e.catch(1),console.error("Registrierungsfehler:",e.t0),n.status(500).json({error:"Fehler bei der Registrierung"});case 12:case"end":return e.stop()}},null,null,[[1,8]])}),app.post("/api/auth/login",function(r,n){var t,s,a,o;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return t=r.body,s=t.email,a=t.passwort,e.prev=1,e.next=4,regeneratorRuntime.awrap(Benutzer.findOne({email:s}));case 4:if(o=e.sent){e.next=7;break}return e.abrupt("return",n.status(400).json({error:"Benutzer nicht gefunden"}));case 7:if(o.passwort!==a)return e.abrupt("return",n.status(400).json({error:"Falsches Passwort"}));e.next=9;break;case 9:n.status(200).json({message:"Anmeldung erfolgreich",name:o.Vorname,nachname:o.Nachname}),e.next=16;break;case 12:e.prev=12,e.t0=e.catch(1),console.error("Login-Fehler:",e.t0),n.status(500).json({error:"Fehler beim Login"});case 16:case"end":return e.stop()}},null,null,[[1,12]])}),app.post("/api/termin",function(r,n){var t,s,a,o,i;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return t=r.body,s=t.email,a=t.datum,o=t.zeit,console.log("Termin-Daten:",s,a,o),e.prev=2,e.next=5,regeneratorRuntime.awrap(Benutzer.findOne({email:s}));case 5:if(e.sent){e.next=9;break}return console.log("Benutzer nicht gefunden"),e.abrupt("return",n.status(404).json({error:"Benutzer nicht gefunden"}));case 9:return i=new Termin({email:s,date:new Date(a),time:o}),e.next=12,regeneratorRuntime.awrap(i.save());case 12:console.log("Termin erstellt:",i),n.status(201).json({message:"Termin erfolgreich erstellt",termin:i}),e.next=20;break;case 16:e.prev=16,e.t0=e.catch(2),console.error("Fehler beim Erstellen des Termins:",e.t0),n.status(500).json({error:"Fehler beim Erstellen des Termins"});case 20:case"end":return e.stop()}},null,null,[[2,16]])});var PORT=5e3;app.listen(PORT,function(){console.log("Server l√§uft auf Port ".concat(PORT))});
//# sourceMappingURL=server.min.js.map

{"version":3,"sources":["server.js"],"names":["express","require","mongoose","cors","app","use","bodyParser","json","connect","log","err","console","error","benutzerSchema","Schema","Vorname","required","Nachname","type","String","email","unique","tel","model","ref","Date","req","body","Geschlecht","adresse","passwort","neuerBenutzer","Benutzer","save","status","message","_context","t0","res","_req$body2","benutzer","regeneratorRuntime","async","_context2","prev","next","awrap","findOne","sent","abrupt","Termin","post","nachname","stop","datum","zeit","neuerTermin","date","time","termin","_context3","PORT","listen","concat"],"mappings":"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","file":"server.min.js","sourcesContent":["const express = require('express');\r\nconst mongoose = require('mongoose');\r\nconst bodyParser = require('body-parser');\r\nconst cors = require('cors');\r\n\r\nconst app = express();\r\n\r\n// Body-Parser-Middleware\r\napp.use(express.json()); // F체r JSON-Daten\r\napp.use(bodyParser.json());\r\napp.use(cors());\r\n\r\n// MongoDB-Verbindung\r\nmongoose.connect('mongodb://localhost:27017/fitnessDB', {\r\n  //useNewUrlParser: true,\r\n  //useUnifiedTopology: true,\r\n})\r\n.then(() => console.log('MongoDB-Verbindung erfolgreich'))\r\n.catch((err) => console.error('MongoDB-Verbindungsfehler:', err));\r\n\r\n// Benutzer-Modell\r\nconst benutzerSchema = new mongoose.Schema({\r\n  Vorname: { type: String, required: true },\r\n  Nachname: { type: String, required: true },\r\n  email: { type: String, required: true, unique: true },\r\n  tel: { type: String },\r\n  Geschlecht: { type: String },\r\n  adresse: { type: String },\r\n  passwort: { type: String, required: true },\r\n});\r\n\r\nconst Benutzer = mongoose.model('Benutzer', benutzerSchema);\r\n\r\n// Termin-Modell\r\nconst terminSchema = new mongoose.Schema({\r\n  email: { type: String, ref: 'Benutzer', required: true },\r\n  datum: { type: Date, required: true },\r\n  zeit: { type: String, required: true },\r\n});\r\n\r\nconst Termin = mongoose.model('Termin', terminSchema);\r\n\r\n// Registrierungs-Endpunkt\r\napp.post('/api/auth/register', async (req, res) => {\r\n  const { Vorname, Nachname, email, tel, Geschlecht, adresse, passwort } = req.body;\r\n\r\n  try {\r\n    const neuerBenutzer = new Benutzer({ Vorname, Nachname, email, tel, Geschlecht, adresse, passwort });\r\n    await neuerBenutzer.save();\r\n    res.status(201).json({ message: 'Benutzer erfolgreich gespeichert' });\r\n  } catch (err) {\r\n    console.error('Registrierungsfehler:', err);\r\n    res.status(500).json({ error: 'Fehler bei der Registrierung' });\r\n  }\r\n});\r\n\r\n// Login-Endpunkt\r\napp.post('/api/auth/login', async (req, res) => {\r\n  const { email, passwort } = req.body;\r\n\r\n  try {\r\n    const benutzer = await Benutzer.findOne({ email });\r\n    if (!benutzer) {\r\n      return res.status(400).json({ error: 'Benutzer nicht gefunden' });\r\n    }\r\n\r\n    if (benutzer.passwort !== passwort) {\r\n      return res.status(400).json({ error: 'Falsches Passwort' });\r\n    }\r\n\r\n    res.status(200).json({\r\n      message: 'Anmeldung erfolgreich',\r\n      name: benutzer.Vorname,\r\n      nachname: benutzer.Nachname,\r\n    });\r\n  } catch (err) {\r\n    console.error('Login-Fehler:', err);\r\n    res.status(500).json({ error: 'Fehler beim Login' });\r\n  }\r\n});\r\n\r\n// Termin erstellen Endpunkt\r\napp.post('/api/termin', async (req, res) => {\r\n  const { email, datum, zeit } = req.body;\r\n\r\n  console.log(\"Termin-Daten:\", email, datum, zeit);\r\n\r\n  try {\r\n    // Benutzer체berpr체fung per E-Mail\r\n    const benutzer = await Benutzer.findOne({ email });\r\n    if (!benutzer) {\r\n        console.log(\"Benutzer nicht gefunden\");\r\n      return res.status(404).json({ error: 'Benutzer nicht gefunden' });\r\n    }\r\n\r\n    // Neuen Termin erstellen\r\n    const neuerTermin = new Termin({ email, date: new Date(datum), time: zeit });\r\n    await neuerTermin.save();\r\n    console.log(\"Termin erstellt:\", neuerTermin);\r\n\r\n    res.status(201).json({ message: 'Termin erfolgreich erstellt', termin: neuerTermin });\r\n  } catch (err) {\r\n    console.error('Fehler beim Erstellen des Termins:', err);\r\n    res.status(500).json({ error: 'Fehler beim Erstellen des Termins' });\r\n  }\r\n});\r\n\r\n// Server starten\r\nconst PORT = 5000;\r\napp.listen(PORT, () => {\r\n  console.log(`Server l채uft auf Port ${PORT}`);\r\n});"]}
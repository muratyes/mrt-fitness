{"version":3,"sources":["server.js"],"names":["express","require","mongoose","bodyParser","cors","app","use","json","connect","then","console","log","err","error","benutzerSchema","Schema","Vorname","type","String","required","Nachname","email","unique","tel","Geschlecht","adresse","passwort","Benutzer","model","terminSchema","ref","datum","Date","zeit","Termin","post","req","res","body","neuerBenutzer","save","status","message","findOne","benutzer","name","nachname","neuerTermin","date","time","termin","PORT","listen"],"mappings":"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","sourcesContent":["const express = require('express');\r\nconst mongoose = require('mongoose');\r\nconst bodyParser = require('body-parser');\r\nconst cors = require('cors');\r\n\r\nconst app = express();\r\n\r\n// Body-Parser-Middleware\r\napp.use(express.json()); // F체r JSON-Daten\r\napp.use(bodyParser.json());\r\napp.use(cors());\r\n\r\n// MongoDB-Verbindung\r\nmongoose.connect('mongodb://localhost:27017/fitnessDB', {\r\n  //useNewUrlParser: true,\r\n  //useUnifiedTopology: true,\r\n})\r\n.then(() => console.log('MongoDB-Verbindung erfolgreich'))\r\n.catch((err) => console.error('MongoDB-Verbindungsfehler:', err));\r\n\r\n// Benutzer-Modell\r\nconst benutzerSchema = new mongoose.Schema({\r\n  Vorname: { type: String, required: true },\r\n  Nachname: { type: String, required: true },\r\n  email: { type: String, required: true, unique: true },\r\n  tel: { type: String },\r\n  Geschlecht: { type: String },\r\n  adresse: { type: String },\r\n  passwort: { type: String, required: true },\r\n});\r\n\r\nconst Benutzer = mongoose.model('Benutzer', benutzerSchema);\r\n\r\n// Termin-Modell\r\nconst terminSchema = new mongoose.Schema({\r\n  email: { type: String, ref: 'Benutzer', required: true },\r\n  datum: { type: Date, required: true },\r\n  zeit: { type: String, required: true },\r\n});\r\n\r\nconst Termin = mongoose.model('Termin', terminSchema);\r\n\r\n// Registrierungs-Endpunkt\r\napp.post('/api/auth/register', async (req, res) => {\r\n  const { Vorname, Nachname, email, tel, Geschlecht, adresse, passwort } = req.body;\r\n\r\n  try {\r\n    const neuerBenutzer = new Benutzer({ Vorname, Nachname, email, tel, Geschlecht, adresse, passwort });\r\n    await neuerBenutzer.save();\r\n    res.status(201).json({ message: 'Benutzer erfolgreich gespeichert' });\r\n  } catch (err) {\r\n    console.error('Registrierungsfehler:', err);\r\n    res.status(500).json({ error: 'Fehler bei der Registrierung' });\r\n  }\r\n});\r\n\r\n// Login-Endpunkt\r\napp.post('/api/auth/login', async (req, res) => {\r\n  const { email, passwort } = req.body;\r\n\r\n  try {\r\n    const benutzer = await Benutzer.findOne({ email });\r\n    if (!benutzer) {\r\n      return res.status(400).json({ error: 'Benutzer nicht gefunden' });\r\n    }\r\n\r\n    if (benutzer.passwort !== passwort) {\r\n      return res.status(400).json({ error: 'Falsches Passwort' });\r\n    }\r\n\r\n    res.status(200).json({\r\n      message: 'Anmeldung erfolgreich',\r\n      name: benutzer.Vorname,\r\n      nachname: benutzer.Nachname,\r\n    });\r\n  } catch (err) {\r\n    console.error('Login-Fehler:', err);\r\n    res.status(500).json({ error: 'Fehler beim Login' });\r\n  }\r\n});\r\n\r\n// Termin erstellen Endpunkt\r\napp.post('/api/termin', async (req, res) => {\r\n  const { email, datum, zeit } = req.body;\r\n\r\n  console.log(\"Termin-Daten:\", email, datum, zeit);\r\n\r\n  try {\r\n    // Benutzer체berpr체fung per E-Mail\r\n    const benutzer = await Benutzer.findOne({ email });\r\n    if (!benutzer) {\r\n        console.log(\"Benutzer nicht gefunden\");\r\n      return res.status(404).json({ error: 'Benutzer nicht gefunden' });\r\n    }\r\n\r\n    // Neuen Termin erstellen\r\n    const neuerTermin = new Termin({ email, date: new Date(datum), time: zeit });\r\n    await neuerTermin.save();\r\n    console.log(\"Termin erstellt:\", neuerTermin);\r\n\r\n    res.status(201).json({ message: 'Termin erfolgreich erstellt', termin: neuerTermin });\r\n  } catch (err) {\r\n    console.error('Fehler beim Erstellen des Termins:', err);\r\n    res.status(500).json({ error: 'Fehler beim Erstellen des Termins' });\r\n  }\r\n});\r\n\r\n// Server starten\r\nconst PORT = 5000;\r\napp.listen(PORT, () => {\r\n  console.log(`Server l채uft auf Port ${PORT}`);\r\n});"],"file":"server.dev.js"}